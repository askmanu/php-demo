<?php

/**
* The User entity class is a core component of the La Boot'ique e-commerce platform's authentication and user management system. 
* 
* It implements Symfony's security interfaces to handle user authentication and password management. The entity stores essential user information including email, password, first name, last name, and user roles. 
* 
* It maintains relationships with user addresses and orders through one-to-many associations, allowing users to have multiple shipping addresses and order histories. The class includes validation constraints to ensure data integrity, such as requiring unique email addresses and minimum length for names. 
* 
* Beyond basic CRUD operations for user properties, it provides convenience methods like getFullName() and implements Symfony's security-required methods for user identification and role management.
*/

namespace App\Entity;

use App\Repository\UserRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

#[ORM\Entity(repositoryClass: UserRepository::class)]
#[UniqueEntity('email', "Cet email est dÃ©ja pris")]
#[ORM\Table(name: '`user`')]
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
    /**
    * Primary key identifier for the entity. 
    * This integer value is automatically generated by the database and uniquely identifies each record.
    */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    /**
    * Email address property that uniquely identifies a user in the system. 
    * This field is required and stored in the database as a unique string.
    */
    #[ORM\Column(type: 'string', length: 180, unique: true)]
    #[Assert\NotBlank]
    private $email;

    #[ORM\Column(type: 'json')]
    private $roles = [];

    #[ORM\Column(type: 'string')]
    private $password;

    /**
    * A private property that stores the user's first name. 
    * It is mapped to a database column and must contain at least 3 characters.
    */
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(null, 3)]
    private $firstname;

    #[ORM\Column(type: 'string', length: 255)]
    private $lastname;

    #[ORM\OneToMany(mappedBy: 'user', targetEntity: Address::class)]
    private $addresses;

    #[ORM\OneToMany(mappedBy: 'user', targetEntity: Order::class)]
    private $orders;

    /**
    * Initializes a new instance of the class with empty collections for addresses and orders.
    */
    public function __construct()
    {
        $this->addresses = new ArrayCollection();
        $this->orders = new ArrayCollection();
    }

    /**
    * Gets the ID of the entity.
    * 
    * @return The ID of the entity as an integer, or null if no ID is set.
    */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Returns the email address associated with this entity.
    * 
    * @return The email address as a string, or null if no email is set.
    */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
    * Sets the email address for this entity.
    * 
    * @param string $email The email address to set
    * 
    * @return Returns the current instance to allow method chaining
    */
    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
    * Returns the user's email address as a string, which serves as the unique identifier for authentication in the system.
    * 
    * @return The user's email address as a string, used for authentication identification.
    */
    public function getUserIdentifier(): string
    {
        return (string) $this->email;
    }

    /**
     * @deprecated since Symfony 5.3, use getUserIdentifier instead
     */
    public function getUsername(): string
    {
        return (string) $this->email;
    }

    /**
    * Retrieves the user's roles and ensures that every user has at least the basic ROLE_USER permission. Returns a unique array of roles to avoid duplicates.
    * 
    * @return An array of unique role strings that represent the user's permissions in the system.
    */
    public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        $roles[] = 'ROLE_USER';

        return array_unique($roles);
    }


    /**
    * Sets the roles for the user. In Symfony, roles define the permissions a user has within the application.
    * 
    * @param array roles An array of role strings that define the user's permissions
    * 
    * @return Returns the current instance of the object for method chaining
    */
    public function setRoles(array $roles): self
    {
        $this->roles = $roles;

        return $this;
    }

    /**
    * Returns the hashed password of the user.
    * 
    * @return string The user's hashed password.
    */
    public function getPassword(): string
    {
        return $this->password;
    }

    /**
    * Sets the password for the user and returns the current instance.
    * 
    * @param string password The password to set for the user
    * 
    * @return Returns the current instance to allow method chaining.
    */
    public function setPassword(string $password): self
    {
        $this->password = $password;

        return $this;
    }

    /**
    * Returns the salt that was originally used to encode the password. This method is required by Symfony's UserInterface but returns null as modern password hashers handle salting internally.
    * 
    * @return Always returns null as the application likely uses a modern password hashing algorithm that handles its own salt.
    * 
    * @see UserInterface
    */
    public function getSalt(): ?string
    {
        return null;
    }

    /**
    * Erases sensitive credentials from the user object. 
    * This method is part of Symfony's UserInterface implementation and is called when the authentication process is complete. 
    * It should be used to remove any sensitive data that shouldn't be stored long-term.
    * 
    * @see UserInterface
    */
    public function eraseCredentials()
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // $this->plainPassword = null;
    }

    /**
    * Retrieves the user's first name.
    * 
    * @return The user's first name as a string, or null if no first name is set.
    */
    public function getFirstname(): ?string
    {
        return $this->firstname;
    }

    /**
    * Sets the first name of the user and returns the current instance for method chaining.
    * 
    * @param string $firstname The first name to be set for the user
    * 
    * @return self - Returns the current instance to allow method chaining
    */
    public function setFirstname(string $firstname): self
    {
        $this->firstname = $firstname;

        return $this;
    }

    /**
    * Gets the last name of the user.
    * 
    * @return The user's last name as a string, or null if no last name is set.
    */
    public function getLastname(): ?string
    {
        return $this->lastname;
    }

    /**
    * Sets the last name of the user and returns the current instance for method chaining.
    * 
    * @param string lastname The last name to be set for the user
    * 
    * @return The current instance of the object, allowing for method chaining
    */
    public function setLastname(string $lastname): self
    {
        $this->lastname = $lastname;

        return $this;
    }

    /**
    * Returns the user's full name by concatenating the first name and last name with a space between them.
    * 
    * @return A string containing the user's full name (firstname + lastname) or null if the name components are not set.
    */
    public function getFullName(): ?string
    {
        return $this->firstname . ' ' . $this->lastname;
    }

    /**
    * Retrieves the collection of addresses associated with this entity.
    * 
    * @return Collection object containing all addresses associated with this entity.
    */
    public function getAddresses(): Collection
    {
        return $this->addresses;
    }

    /**
    * Adds an address to the user's collection of addresses if it doesn't already exist, and establishes the bidirectional relationship between the user and address.
    * 
    * @param Address address The address object to add to the user's collection
    * 
    * @return Returns the current user instance to allow for method chaining.
    */
    public function addAddress(Address $address): self
    {
        if (!$this->addresses->contains($address)) {
            $this->addresses[] = $address;
            $address->setUser($this);
        }

        return $this;
    }

    /**
    * Removes an address from the user's collection of addresses and updates the bidirectional relationship by setting the address's user reference to null if necessary.
    * 
    * @param Address address The address entity to be removed from the user's collection
    * 
    * @return Returns the current User instance to allow for method chaining
    */
    public function removeAddress(Address $address): self
    {
        if ($this->addresses->removeElement($address)) {
            // set the owning side to null (unless already changed)
            if ($address->getUser() === $this) {
                $address->setUser(null);
            }
        }

        return $this;
    }

    /**
    * Retrieves the collection of orders associated with this entity.
    * 
    * @return A Collection object containing all orders associated with this entity.
    */
    public function getOrders(): Collection
    {
        return $this->orders;
    }

    /**
    * Adds an order to the user's collection of orders and establishes a bidirectional relationship between the user and the order.
    * 
    * @param Order order The order to be associated with this user
    * 
    * @return Returns the current user instance (self) to allow method chaining.
    */
    public function addOrder(Order $order): self
    {
        if (!$this->orders->contains($order)) {
            $this->orders[] = $order;
            $order->setUser($this);
        }

        return $this;
    }

    /**
    * Removes an order from the user's collection of orders and updates the bidirectional relationship by setting the order's user reference to null if necessary.
    * 
    * @param Order order The order to be removed from the user's collection
    * 
    * @return Returns the current User instance to allow method chaining
    */
    public function removeOrder(Order $order): self
    {
        if ($this->orders->removeElement($order)) {
            // set the owning side to null (unless already changed)
            if ($order->getUser() === $this) {
                $order->setUser(null);
            }
        }

        return $this;
    }

}
