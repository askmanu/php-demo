<?php

/**
* This file defines the Order entity class for the La Boot'ique e-commerce platform. It represents customer orders in the system and maps to the database using Doctrine ORM. 
* 
* The Order entity maintains relationships with users (who placed the order) and order details (individual items purchased). 
* It stores essential order information including creation timestamp, delivery details, carrier information with pricing, a unique reference number, and payment processing data through Stripe integration. 
* 
* The class provides functionality to calculate order totals, manage item quantities, and track order status through a state property. 
* 
* This entity serves as a central component in the e-commerce order management system, connecting customers with their purchased products and delivery information.
*/


namespace App\Entity;

use App\Repository\OrderRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: OrderRepository::class)]
#[ORM\Table(name: '`order`')]
class Order
{   
    /**
    * Primary identifier property for the entity. 
    * This integer value is automatically generated by the database 
    * and serves as the primary key.
    */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    /**
    * A many-to-one relationship to the User entity representing the customer who placed this order. 
    * Each order belongs to exactly one user, while a user can have multiple orders.
    */
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'orders')]
    #[ORM\JoinColumn(nullable: false)]
    private $user;

    #[ORM\Column(type: 'datetime')]
    private $createdAt;

    #[ORM\Column(type: 'string', length: 255)]
    private $carrierName;

    #[ORM\Column(type: 'string', length: 255)]
    private $carrierPrice;

    #[ORM\Column(type: 'text')]
    private $delivery;

    #[ORM\OneToMany(mappedBy: 'bindedOrder', targetEntity: OrderDetails::class)]
    private $orderDetails;

    #[ORM\Column(type: 'string', length: 255)]
    private $reference;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    private $stripeSession;

    #[ORM\Column(type: 'integer')]
    private $state;

    /**
    * Initializes a new instance of the class with an empty order details collection.
    */
    public function __construct()
    {
        $this->orderDetails = new ArrayCollection();
    }

    /**
    * Gets the ID of the entity.
    * 
    * @return The ID of the entity as an integer, or null if no ID is set.
    */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Returns the User object associated with this instance or null if no user is associated.
    * 
    * @return User object if a user is associated with this instance, or null if no user is associated.
    */
    public function getUser(): ?User
    {
        return $this->user;
    }

    /**
    * Sets the user associated with this entity.
    * 
    * @param ?User user The User object to associate with this entity, or null to remove the association
    * 
    * @return Returns the current instance of the object for method chaining.
    */
    public function setUser(?User $user): self
    {
        $this->user = $user;

        return $this;
    }

    /**
    * Returns the creation timestamp of this entity.
    * 
    * @return The DateTime when this entity was created, or null if no creation date is set.
    */
    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    /**
    * Sets the creation date and time for this entity.
    * 
    * @param \DateTimeInterface createdAt The date and time when the entity was created
    * 
    * @return The current instance of this object for method chaining
    */
    public function setCreatedAt(\DateTimeInterface $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
    * Returns the name of the carrier associated with this object.
    * 
    * @return The carrier name as a string, or null if no carrier name is set.
    */
    public function getCarrierName(): ?string
    {
        return $this->carrierName;
    }

    /**
    * Sets the carrier name for the shipping or order entity.
    * 
    * @param string carrierName The name of the shipping carrier to be set
    * 
    * @return Returns the current instance of the object to allow method chaining.
    */
    public function setCarrierName(string $carrierName): self
    {
        $this->carrierName = $carrierName;

        return $this;
    }

    /**
    * Gets the carrier price value.
    * 
    * @return The carrier price as a string or null if no price is set.
    */
    public function getCarrierPrice(): ?string
    {
        return $this->carrierPrice;
    }

    /**
    * Sets the carrier price for shipping and returns the current object instance.
    * 
    * @param string carrierPrice The price of the carrier as a string value
    * 
    * @return Returns the current instance of the object to allow for method chaining.
    */
    public function setCarrierPrice(string $carrierPrice): self
    {
        $this->carrierPrice = $carrierPrice;

        return $this;
    }

    /**
    * Retrieves the delivery information associated with this object.
    * 
    * @return A string containing the delivery information, or null if no delivery information is set.
    */
    public function getDelivery(): ?string
    {
        return $this->delivery;
    }

    /**
    * Sets the delivery information for this object.
    * 
    * @param string $delivery The delivery information to set
    * 
    * @return Returns the current instance to allow method chaining
    */
    public function setDelivery(string $delivery): self
    {
        $this->delivery = $delivery;

        return $this;
    }

    /**
    * Retrieves the collection of order details associated with this order.
    * 
    * @return Collection of OrderDetail entities associated with this order.
    */
    public function getOrderDetails(): Collection
    {
        return $this->orderDetails;
    }

    /**
    * Adds an OrderDetails object to this order's collection if it doesn't already exist, and establishes the bidirectional relationship.
    * 
    * @param OrderDetails oderDetail The order detail object to add to this order
    * 
    * @return self - Returns the current order instance for method chaining
    */
    public function addOderDetail(OrderDetails $oderDetail): self
    {
        if (!$this->orderDetails->contains($oderDetail)) {
            $this->orderDetails[] = $oderDetail;
            $oderDetail->setBindedOrder($this);
        }

        return $this;
    }

    /**
    * Removes an order detail from this order and updates the relationship between the order and the order detail.
    * 
    * @param OrderDetails oderDetail The order detail to remove from this order
    * 
    * @return The current Order instance for method chaining
    */
    public function removeOderDetail(OrderDetails $oderDetail): self
    {
        if ($this->orderDetails->removeElement($oderDetail)) {
            // set the owning side to null (unless already changed)
            if ($oderDetail->getBindedOrder() === $this) {
                $oderDetail->setBindedOrder(null);
            }
        }

        return $this;
    }

    /**
    * Calculates the total price of an order by summing the total prices of all order details (products).
    * 
    * @return A float value representing the total price of the order.
    */
    public function getTotal():float
    {
        $total = 0;
        foreach ($this->getOrderDetails() as $product) {
            $total += $product->getTotal();
        }
        return $total;
  
    }

    /**
    * Calculates the total quantity of all items in the order by summing the quantities of each product in the order details.
    * 
    * @return A float representing the total quantity of all products in the order.
    */
    public function getTotalQuantity():float
    {
        $total = 0;
        foreach ($this->getOrderDetails() as $product) {
            $total += $product->getQuantity();
        }
        return $total;
  
    }

    /**
    * Gets the reference identifier associated with this entity.
    * 
    * @return The reference string if set, or null if no reference is assigned.
    */
    public function getReference(): ?string
    {
        return $this->reference;
    }

    /**
    * Sets the reference value for this object.
    * 
    * @param string $reference The reference identifier to set
    * 
    * @return self - Returns the current instance to allow method chaining
    */
    public function setReference(string $reference): self
    {
        $this->reference = $reference;

        return $this;
    }

    /**
    * Retrieves the Stripe session identifier associated with this object. The Stripe session is used for payment processing integration.
    * 
    * @return The Stripe session identifier as a string, or null if no session has been set.
    */
    public function getStripeSession(): ?string
    {
        return $this->stripeSession;
    }

    /**
    * Sets the Stripe session identifier for this entity. This method is used as part of the Stripe payment integration to store the session ID that identifies a specific payment session.
    * 
    * @param ?string $stripeSession The Stripe session identifier to set, or null to clear the current value
    * 
    * @return self - Returns the current instance to allow method chaining
    */
    public function setStripeSession(?string $stripeSession): self
    {
        $this->stripeSession = $stripeSession;

        return $this;
    }

    /**
    * Gets the current state value of the object.
    * 
    * @return The current state as an integer, or null if no state is set.
    */
    public function getState(): ?int
    {
        return $this->state;
    }

    /**
    * Sets the state value for this entity and enables method chaining.
    * 
    * @param int state The state value to set
    * 
    * @return The current instance of the class for method chaining
    */
    public function setState(int $state): self
    {
        $this->state = $state;

        return $this;
    }
}
