<?php

/**
* The OrderDetails entity class represents individual line items within an order in the La Boot'ique e-commerce platform. 
* 
* It stores essential information about each product purchased in an order, including the product name, quantity, unit price, and total price. 
* 
* The entity maintains a many-to-one relationship with the Order entity, allowing each order to contain multiple line items. 
* This class provides methods to access and modify all properties and includes a string representation method that combines the product name and quantity for display purposes. 
* This entity is fundamental to the order management system, enabling the application to track exactly what products were purchased in each transaction.
*/

namespace App\Entity;

use App\Repository\OrderDetailsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: OrderDetailsRepository::class)]
class OrderDetails
{
    /**
    * Primary key identifier for the entity. 
    * This integer property is automatically generated by the database (auto-increment) 
    * and serves as the unique identifier for each record.
    */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    /**
    * A many-to-one relationship to the Order entity. 
    * This property represents the order to which this detail belongs. 
    * The relationship is required (not nullable).
    */
    #[ORM\ManyToOne(targetEntity: Order::class, inversedBy: 'orderDetails')]
    #[ORM\JoinColumn(nullable: false)]
    private $bindedOrder;

    #[ORM\Column(type: 'string', length: 255)]
    private $product;

    #[ORM\Column(type: 'integer')]
    private $quantity;

    #[ORM\Column(type: 'float')]
    private $price;

    #[ORM\Column(type: 'float')]
    private $total;

    /**
    * Gets the ID of the entity.
    * 
    * @return The ID of the entity as an integer, or null if no ID is set.
    */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Retrieves the Order object that is bound to this entity.
    * 
    * @return The Order object that is bound to this entity, or null if no order is bound.
    */
    public function getBindedOrder(): ?Order
    {
        return $this->bindedOrder;
    }

    /**
    * Sets the associated order for this entity or removes the association if null is provided.
    * 
    * @param ?Order bindedOrder The order to associate with this entity, or null to remove the association
    * 
    * @return The current instance for method chaining
    */
    public function setBindedOrder(?Order $bindedOrder): self
    {
        $this->bindedOrder = $bindedOrder;

        return $this;
    }

    /**
    * Gets the product value associated with this object. Returns null if no product is set.
    * 
    * @return The product as a string, or null if no product is set.
    */
    public function getProduct(): ?string
    {
        return $this->product;
    }

    /**
    * Sets the product value and returns the current instance for method chaining.
    * 
    * @param string product The product value to set
    * 
    * @return The current instance for method chaining
    */
    public function setProduct(string $product): self
    {
        $this->product = $product;

        return $this;
    }

    /**
    * Gets the quantity value associated with this object.
    * 
    * @return The quantity as an integer, or null if no quantity is set.
    */
    public function getQuantity(): ?int
    {
        return $this->quantity;
    }

    /**
    * Sets the quantity value for this object and returns the object instance.
    * 
    * @param int quantity The quantity value to set
    * 
    * @return self - Returns the current object instance to allow method chaining
    */
    public function setQuantity(int $quantity): self
    {
        $this->quantity = $quantity;

        return $this;
    }

    /**
    * Gets the price value of the current object.
    * 
    * @return The price as a float value, or null if no price is set.
    */
    public function getPrice(): ?float
    {
        return $this->price;
    }

    /**
    * Sets the price value for this object.
    * 
    * @param float price The price value to set
    * 
    * @return The current instance of this class for method chaining
    */
    public function setPrice(float $price): self
    {
        $this->price = $price;

        return $this;
    }

    /**
    * Retrieves the total value associated with this object.
    * 
    * @return A float representing the total value, or null if no total has been set.
    */
    public function getTotal(): ?float
    {
        return $this->total;
    }

    /**
    * Sets the total value and returns the current instance to allow method chaining.
    * 
    * @param float total The total value to be set
    * 
    * @return The current instance of the class for method chaining
    */
    public function setTotal(float $total): self
    {
        $this->total = $total;

        return $this;
    }

    /**
    * Returns a string representation of the item, showing the product name followed by 'x' and the quantity.
    * 
    * @return A string in the format "product x quantity" where product is the result of getProduct() and quantity is the result of getQuantity().
    */
    public function __toString()
    {
        return $this->getProduct() . 'x' . $this->getQuantity();
    }
}
